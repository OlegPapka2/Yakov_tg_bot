import re

from sqlalchemy.orm import Session
from telegram import (ChatAction,
                      InlineKeyboardButton,
                      InlineKeyboardMarkup,
                      Update)
from telegram.ext import (ConversationHandler,
                          CallbackQueryHandler,
                          CommandHandler,
                          MessageHandler,
                          Filters,
                          CallbackContext)

from config import Config
from crud import city as city_models
from crud.crypto_currency import get_crypto_by_user_id, get_crypto_by_abbr
from crud.currency import get_curr_by_user_id, get_curr_by_name
from crud.user import create_or_update_user, get_user, update_user
from handlers.canel_conversation import cancel, cancel_keyboard
from models.errors import CityFetchError, SinoptikURLFetchError
from utils.db_utils import create_session
from utils.message_utils import send_chat_action
from utils.time_utils import UserTime
from utils.weather_utils import OpenWeatherMapAPI, SinoptikScraper

(CONV_START,
 USER_CITY_CHANGE,
 USER_CITY_TIMEZONE_CHECK,
 USER_TIMEZONE_CHANGE,
 USER_CRYPTO_CHANGE,
 USER_CURR_CHANGE) = 1, 2, 3, 4, 5, 6

main_settings_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton('–ú—ñ—Å—Ç–æ üèôÔ∏è', callback_data='city')],
    [InlineKeyboardButton('–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å üåê', callback_data='timezone')],
    [InlineKeyboardButton('–ö—Ä–∏–ø—Ç–æ –≤–∞–ª—é—Ç–∏ ü™ô', callback_data='crypto')],
    [InlineKeyboardButton('–§—ñ–∞—Ç–Ω—ñ –≤–∞–ª—é—Ç–∏ üá∫üá¶', callback_data='curr')],
    [InlineKeyboardButton('üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='cancel')]
], )


@create_session
@send_chat_action(ChatAction.TYPING)
def settings(update: Update, context: CallbackContext, db: Session):
    message = update.message
    user = message.from_user
    context.user_data['cancel_reply_msg_id'] = message.message_id

    create_or_update_user(db, user)

    context.user_data['cancel_reply_message'] = message.message_id
    context.user_data['cancel_reply_markup_msg'] = message.reply_text(
        '–ë–∞–∂–∞—î—à –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —â–æ—Å—å?\n–û–±–µ—Ä–∏ –∑ –Ω–∏–∂—á–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –æ–ø—Ü—ñ–π:', reply_markup=main_settings_keyboard)

    return CONV_START


@create_session
def user_city_check(update: Update, context: CallbackContext, db: Session):
    query = update.callback_query
    user = update.effective_user
    message = query.message
    query.answer()

    msg = 'üÜó –û–±—Ä–∞–Ω–æ –∑–º—ñ–Ω—É –º—ñ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏.\n\n'

    if row := city_models.get_user_city(db, user.id):
        city_model, user_model = row[0], row[1]
        msg += (f'‚ö† –í —Ç–µ–±–µ —É–∂–µ –≤–∫–∞–∑–∞–Ω–µ –º—ñ—Å—Ç–æ - {city_model.name}. –¢–∏ —Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ—à –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏?\n\n'
                '–î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ '
                '–∑ ua.sinoptik.ua —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.')
    else:
        msg += ('–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ –∑ ua.sinoptik.ua '
                '—É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ.')

    msg += ('\n\nP.S. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ - —Å–ø—Ä–æ–±—É–π –≤–∫–∞–∑–∞—Ç–∏ –º—ñ—Å—Ç–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, '
            '–∞–±–æ –∂ —Å–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –Ω–∞–ø–∏—à–∏ –ø—Ä–æ —Ü–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É - /feedback')

    context.user_data['msg_with_markup'] = message.edit_text(text=msg, reply_markup=cancel_keyboard)

    return USER_CITY_CHANGE


@create_session
@send_chat_action(ChatAction.TYPING)
def user_city_change(update: Update, context: CallbackContext, db: Session):
    message = update.message
    user = update.effective_user
    msg_with_markup = context.user_data['msg_with_markup']
    context.user_data['cancel_reply_msg_id'] = message.message_id

    msg_with_markup.edit_reply_markup()
    user_input = message.text.strip().capitalize()

    wrong_symbols_error_msg = '‚ö† –ì–ª—É–∑—É—î—à? –ë–æ, —è —â–æ—Å—å –≥–ª–∏–±–æ–∫–æ —Å—É–º–Ω—ñ–≤–∞—é—Å—å, —â–æ —î —Ç–∞–∫–µ –º—ñ—Å—Ç–æ...'
    if re.search(r'\d|[.^$*+?\[\](){}\\,/!@#%&|~`\'\";:_=<>]', user_input) or len(user_input) > 25:
        context.user_data['msg_with_markup'] = message.reply_text(wrong_symbols_error_msg, reply_markup=cancel_keyboard)
        return USER_CITY_CHANGE

    try:
        city_data = OpenWeatherMapAPI.get_city(user_input)
    except CityFetchError:
        city_not_found_error_msg = '‚ö† C—Ö–æ–∂–µ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –≤–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤—ñ—Ä–Ω–æ(–∞–±–æ —è –¥—É—Ä–Ω–∏–π), –±–æ –Ω–µ –º–æ–∂—É –∑–∞–Ω–π—Ç–∏ —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞.'
        context.user_data['msg_with_markup'] = message.reply_text(city_not_found_error_msg,
                                                                  reply_markup=cancel_keyboard)
        return USER_CITY_CHANGE

    user_model = get_user(db, user.id)

    city_name_local = city_data['local_name']
    city_name_eng = city_data['name']
    msg = f'‚úÖ –ó—Ä–æ–±–ª–µ–Ω–æ, —Ç–≤–æ—î –º—ñ—Å—Ç–æ —Ç–µ–ø–µ—Ä - {city_name_local}.'

    if city_model := city_models.get_city(db, city_name_eng):
        if city_model.name == user_model.city[0].name:
            msg = '‚ùï –¢–∞–∫ —Ü–µ –∂ —Ç–µ —Å–∞–º–µ –º—ñ—Å—Ç–æ, –∂–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω –Ω–µ –≤–Ω–æ—à—É üôÉ\n\n –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —â–µ —â–æ—Å—å?'

        if not city_model.sinoptik_url:
            try:
                url = SinoptikScraper.get_url(city_name_local)
                city_model.sinoptik_url = url
            except SinoptikURLFetchError:
                msg += '\n\n–ù–µ –≤–¥–∞–ª–æ—Å—å –¥–æ–¥–∞—Ç–∏ –¥–∞–Ω—ñ –∑ ua.sinoptik.ua!'

        user_model.city = [city_model]
        db.commit()

        message.reply_text(msg, reply_markup=main_settings_keyboard)
        return CONV_START
    else:
        sinoptik_base_url = SinoptikScraper.get_url(city_name_local)
        city_model = city_models.create_city(db,
                                             owm_id=city_data['id'],
                                             name=city_name_eng,
                                             local_name=city_name_local,
                                             lat=city_data['lat'],
                                             lon=city_data['lon'],
                                             sinoptik_url=sinoptik_base_url,
                                             timezone_offset=city_data['timezone_offset'])

        user_model.city = [city_model]
        db.commit()

    city_changed_message = message.reply_text(msg, reply_to_message_id=message.message_id)

    city_timezone_offset = city_model.timezone_offset
    if city_timezone_offset and (city_timezone_offset != user_model.timezone_offset):
        msg += '\n\n‚ùï –£ —Ç–µ–±–µ —ñ —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞ —Ä—ñ–∑–Ω—ñ —á–∞—Å–æ–≤—ñ –ø–æ—è—Å–∏, –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º—ñ—Å—Ç—É —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å?'
        approve_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f'–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞ "{UserTime.offset_repr(city_timezone_offset)}"',
                                  callback_data='change_to_city')],
            [InlineKeyboardButton('–î–µ—Ç–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è üåê', callback_data='change')],
            [InlineKeyboardButton('üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='cancel')]
        ])

        context.user_data['city_model'] = city_model
        city_changed_message.edit_text(msg, reply_markup=approve_keyboard)
        return USER_CITY_TIMEZONE_CHECK

    context.user_data.clear()
    return ConversationHandler.END


@create_session
def change_timezone_to_city(update: Update, context: CallbackContext, db):
    query = update.callback_query
    user = query.from_user
    query.answer()

    city_model = context.user_data.get('city_model')
    timezone_offset = city_model.timezone_offset

    user_data = {
        'timezone_offset': timezone_offset
    }
    update_user(db, user, user_data)

    msg = f'‚úÖ –ó—Ä–æ–±–ª–µ–Ω–æ, —Ç–≤—ñ–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å —Ç–µ–ø–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∫–∞–∑–∞–Ω–æ–º—É –º—ñ—Å—Ç—É ' \
          f'{city_model.name} ({UserTime.offset_repr(city_model.timezone_offset)}).'
    query.edit_message_text(text=msg, reply_markup=None)

    context.user_data.clear()
    return ConversationHandler.END


@create_session
def user_timezone_check(update: Update, context: CallbackContext, db):
    query = update.callback_query
    query.answer()
    message = query.message

    context.user_data['cancel_reply_msg_id'] = message.message_id
    context.user_data['cancel_reply_markup_msg_id'] = message.message_id

    row = city_models.get_user_city(db, query.from_user.id)
    city_model, user_model = row[0], row[1]

    msg = 'üÜó –û–±—Ä–∞–Ω–æ –∑–º—ñ–Ω—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É.\n\n' \
          '–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É:\n'
    if city_model:
        msg += f'{Config.SPACING}–£ –º—ñ—Å—Ç—ñ {city_model.name}: {UserTime.offset_repr(city_model.timezone_offset)}\n'

    msg += f'{Config.SPACING}–í–∫–∞–∑–∞–Ω–∏–π –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ: {UserTime.offset_repr(user_model.timezone_offset)}\n\n' \
           f'–î–ª—è –∑–º—ñ–Ω–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –Ω–∞–¥—ñ—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ (–ü—Ä–∏–∫–ª–∞–¥: +3).'

    message.edit_text(text=msg, reply_markup=cancel_keyboard)

    return USER_TIMEZONE_CHANGE


@create_session
@send_chat_action(ChatAction.TYPING)
def user_timezone_change(update: Update, context: CallbackContext, db):
    message = update.message
    user = message.from_user
    user_input = message.text.strip()

    msg_with_markup = context.user_data['msg_with_markup']
    msg_with_markup.edit_reply_markup()

    if re.match(r'^[+|-]?[1-9][0-2]?$', user_input) and abs(int(user_input)) in range(1, 13):
        timezone_offset = int(user_input) * 3600
    else:
        msg = '‚ö† C—Ö–æ–∂–µ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
        context.user_data['msg_with_markup'] = message.reply_text(text=msg, reply_markup=cancel_keyboard)
        return USER_TIMEZONE_CHANGE

    context.user_data['cancel_reply_msg_id'] = message.message_id
    update_user(db, user, {'timezone_offset': timezone_offset})

    msg = f'‚úÖ –ó—Ä–æ–±–ª–µ–Ω–æ, —Ç–≤—ñ–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å —Ç–µ–ø–µ—Ä {UserTime.offset_repr(timezone_offset)}'
    message.reply_text(text=msg, reply_markup=None)

    context.user_data.clear()
    return ConversationHandler.END


def compose_crypto_keyboard(data: list | None = None):
    data = [] if data is None else data

    btc = '‚òë' if 'BTC' in data else '‚ùå'
    eth = '‚òë' if 'ETH' in data else '‚ùå'
    bnb = '‚òë' if 'BNB' in data else '‚ùå'
    xrp = '‚òë' if 'XRP' in data else '‚ùå'
    doge = '‚òë' if 'DOGE' in data else '‚ùå'
    sol = '‚òë' if 'SOL' in data else '‚ùå'

    crypto_keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(f'BTC {btc}', callback_data='BTC'),
            InlineKeyboardButton(f'ETH {eth}', callback_data='ETH'),
            InlineKeyboardButton(f'BNB {bnb}', callback_data='BNB'),
        ],
        [
            InlineKeyboardButton(f'XRP {xrp}', callback_data='XRP'),
            InlineKeyboardButton(f'DOGE {doge}', callback_data='DOGE'),
            InlineKeyboardButton(f'SOL {sol}', callback_data='SOL'),
        ],
        [InlineKeyboardButton('üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='cancel')]
    ])

    return crypto_keyboard


@create_session
def user_crypto_check(update: Update, context: CallbackContext, db):
    query = update.callback_query
    message = query.message
    query.answer()
    context.user_data['cancel_reply_msg_id'] = message.message_id

    msg = 'üÜó –û–±—Ä–∞–Ω–æ –∑–º—ñ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n–ú–µ–Ω–µ–¥–∂–µ–º–µ–Ω—Ç –∫—Ä–∏–ø—Ç–æ—é –º–æ–∂–µ—à –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É.'

    if crypto_models := get_crypto_by_user_id(db, update.effective_user.id):
        data = [model.abbr for model in crypto_models]
    else:
        data = []

    crypto_keyboard = compose_crypto_keyboard(data)

    context.user_data['msg_with_markup'] = message.edit_text(text=msg, reply_markup=crypto_keyboard)
    context.user_data['crypto_data'] = data

    return USER_CRYPTO_CHANGE


@create_session
@send_chat_action(ChatAction.TYPING)
def user_crypto_change(update: Update, context: CallbackContext, db):
    query = update.callback_query
    query.answer()
    message = query.message

    user_model = get_user(db, update.effective_user.id)

    user_choice = query.data
    data = context.user_data['crypto_data']
    model = get_crypto_by_abbr(db, user_choice)
    if user_choice in data:
        data.remove(user_choice)
        user_model.crypto_currency.remove(model)
    else:
        data.extend([user_choice])
        user_model.crypto_currency.append(model)

    db.commit()

    crypto_keyboard = compose_crypto_keyboard(data)
    message.edit_reply_markup(crypto_keyboard)

    context.user_data['crypto_data'] = data

    return USER_CRYPTO_CHANGE


def compose_curr_keyboard(data: list | None = None):
    data = [] if data is None else data

    usd = '‚òë' if 'usd' in data else '‚ùå'
    eur = '‚òë' if 'eur' in data else '‚ùå'
    pln = '‚òë' if 'pln' in data else '‚ùå'
    gbp = '‚òë' if 'gbp' in data else '‚ùå'

    curr_keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(f'USD {usd}', callback_data='usd'),
            InlineKeyboardButton(f'EUR {eur}', callback_data='eur'),
            InlineKeyboardButton(f'PLN {pln}', callback_data='pln'),
            InlineKeyboardButton(f'GBP {gbp}', callback_data='gbp'),
        ],
        [InlineKeyboardButton('üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='cancel')]
    ])

    return curr_keyboard


@create_session
def user_curr_check(update: Update, context: CallbackContext, db):
    query = update.callback_query
    message = query.message
    query.answer()
    context.user_data['cancel_reply_msg_id'] = message.message_id

    msg = 'üÜó –û–±—Ä–∞–Ω–æ –∑–º—ñ–Ω—É –≤–∞–ª—é—Ç.\n\n–ú–µ–Ω–µ–¥–∂–µ–º–µ–Ω—Ç –≤–∞–ª—é—Ç–∞–º–∏ –º–æ–∂–µ—à –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É.'

    if curr_models := get_curr_by_user_id(db, update.effective_user.id):
        data = [model.name for model in curr_models]
    else:
        data = []

    curr_keyboard = compose_curr_keyboard(data)

    context.user_data['msg_with_markup'] = message.edit_text(text=msg, reply_markup=curr_keyboard)
    context.user_data['curr_data'] = data
    return USER_CURR_CHANGE


@create_session
@send_chat_action(ChatAction.TYPING)
def user_curr_change(update: Update, context: CallbackContext, db):
    query = update.callback_query
    query.answer()
    message = query.message

    user_model = get_user(db, update.effective_user.id)

    user_choice = query.data
    data = context.user_data['curr_data']
    model = get_curr_by_name(db, user_choice)
    if user_choice in data:
        data.remove(user_choice)
        user_model.currency.remove(model)
    else:
        data.extend([user_choice])
        user_model.currency.append(model)

    db.commit()

    curr_keyboard = compose_curr_keyboard(data)
    message.edit_reply_markup(curr_keyboard)

    context.user_data['curr_data'] = data

    return USER_CURR_CHANGE


settings_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler('settings', settings)],
    states={
        CONV_START: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            CallbackQueryHandler(user_city_check, pattern='^city$'),
            CallbackQueryHandler(user_timezone_check, pattern='^timezone$'),
            CallbackQueryHandler(user_crypto_check, pattern='^crypto$'),
            CallbackQueryHandler(user_curr_check, pattern='^curr$'),
        ],
        USER_CITY_CHANGE: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            MessageHandler(Filters.regex(re.compile(r'^/')), cancel),
            MessageHandler(Filters.text, user_city_change)
        ],
        USER_CITY_TIMEZONE_CHECK: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            CallbackQueryHandler(user_timezone_check, pattern='^change$'),
            CallbackQueryHandler(change_timezone_to_city, pattern='^change_to_city$'),
        ],
        USER_TIMEZONE_CHANGE: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            MessageHandler(Filters.regex(re.compile(r'^/')), cancel),
            MessageHandler(Filters.text, user_timezone_change)
        ],
        USER_CRYPTO_CHANGE: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            CallbackQueryHandler(user_crypto_change, pattern=r'\w')
        ],
        USER_CURR_CHANGE: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            CallbackQueryHandler(user_curr_change, pattern=r'\w')
        ]
    },
    fallbacks=[
        MessageHandler(Filters.all, cancel)
    ],
    conversation_timeout=300.0
)
